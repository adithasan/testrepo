digraph G {
    fontsize = 18
    fontname = Arial
    labelloc = "t"
    labeljust = "l"
    rankdir="TB"

    // System feature title
    label = <<b>Users can view notes in Augmented Reality      </b> - functional requirements are highlighted in red.<br/><br/>>

    // System feature
    node [shape=record fontname=Arial fontsize=12]
    0 [label="Users can view notes in AR"]

    // Functional Requirements
    node [style=filled fillcolor="#FFCCCC"]
    1 [label="AR-Client-Note-Retrieval"]
    2 [label="AR-Server-Note-Logic"]
    3 [label="AR-Server-Note-Retrieval"]
    4 [label="AR-Show-Notes"]
    5 [label="AR-Note-Content-Display"]
    6 [label="AR-Note-Grouping"]
    7 [label="AR-GPS-Permissions"]
    node [fillcolor="#FFFFFF"]
    0 -> 1, 2, 3, 4, 5, 6, 7

    // func-req-1 sub-reqs
    1.1 [label="Client sends a GET request for notes with location of user"]
    1.2 [label="Client should receive and package response for GET request"]
    1 -> {1.1, 1.2}

    2.1 [label="Define quantitative radius of allowed notes"]
    2.2 [label="Retrieve notes from the database"]
    2.3 [label="Compute distance between user's location and location of notes"]
    2.4 [label="Compare distance between user & notes with allowed radius distance"]
    2 -> {2.1, 2.2, 2.3, 2.4}

    "2.2.1" [label="Define query to retrieve notes based on given location"]
    2.2 -> {"2.2.1"}

    3.1 [label="Define a server endpoint for get-notes requests"]
    3.2 [label="Convert array populated with applicable notes to JSON object"]
    3.3 [label="Server returns JSON object will all applicable notes to client"]
    3 -> {3.1, 3.2, 3.3}

    4.1 [label="Render all notes retrieved from server"]
    4 -> {4.1}

    "4.1.1" [label="Create a layout interface for showing a note"]
    "4.1.2" [label="Render the notes based on location in AR"]
    4.1 -> {"4.1.1", "4.1.2"}

    5.1 [label="Client should determine distance between all displayed notes and user"]
    5.2 [label="Define a distance where the full note is viewed"]
    5.3 [label="Create a layout interface for notes with content blurred at certain distance"]
    5.4 [label="Based on distance, the notes should alternate between full and blurred views"]
    5 -> {5.1, 5.2, 5.3, 5.4}

    6.1 [label="Create a view for showing multiple notes in one location"]
    6.2 [label="Define a radius that groups notes that are within that radius of each other"]
    6.3 [label="Complete logic for grouping notes together"]
    6 -> {6.1, 6.2, 6.3}

    "6.1.1" [label="Create an 'unactive' view of grouped notes in a layered view"]
    "6.1.2" [label="Create an 'active' view of grouped notes"]
    "6.1.3" [label="Clicking on the grouped notes will 'activate' the notes"]
    "6.1.4" [label="Swiping on 'active' grouped notes will go through the stack of notes"]
    6.1 -> {"6.1.1", "6.1.2", "6.1.3", "6.1.4"}

    "6.3.1" [label="Determine distance between notes"]
    "6.3.2" [label="Compare computed distance between notes and the defined radius"]
    "6.3.3" [label="Apply grouped or non-grouped view"]
    6.3 -> {"6.3.1", "6.3.2", "6.3.3"}

    7.1 [label="Add check to verify that GPS permissions are provided"]
    7.2 [label="Add ability to ask user to provide GPS permissions"]
    7.3 [label="Implement error message if GPS permissions not provided"]
    7 -> {7.1, 7.2, 7.3}
}